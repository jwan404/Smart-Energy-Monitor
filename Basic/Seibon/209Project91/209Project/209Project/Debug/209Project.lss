
209Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001270  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd9  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000096c  00000000  00000000  00002465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00002dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000717  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a2  00000000  00000000  000036ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003ca1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e5       	ldi	r30, 0x50	; 80
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 30       	cpi	r26, 0x00	; 0
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  ea:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:

float Vref = 2.1;
uint8_t i = 0;

void adc_init() {
	ADMUX = 0b01000010;
  f2:	82 e4       	ldi	r24, 0x42	; 66
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11000100;
  f8:	84 ec       	ldi	r24, 0xC4	; 196
  fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0b00000000;
  fe:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00000000;
 102:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 106:	08 95       	ret

00000108 <init_display>:
void init_display(void){
	//TODO: Finish this function
	//Configure DDR bits of the I/O pins connected to the display
	// Configure shift register control pins as outputs
	//SHCP = 3 SHST = 5 SHDS = 4
	DDRC |= (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5);
 108:	87 b1       	in	r24, 0x07	; 7
 10a:	88 63       	ori	r24, 0x38	; 56
 10c:	87 b9       	out	0x07, r24	; 7
	//Ds 1, Ds 2, Ds 3, Ds 4
	DDRD |= (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	80 6f       	ori	r24, 0xF0	; 240
 112:	8a b9       	out	0x0a, r24	; 10
 114:	08 95       	ret

00000116 <main>:



int main(void)
{
	uart_init(9600);
 116:	60 e8       	ldi	r22, 0x80	; 128
 118:	75 e2       	ldi	r23, 0x25	; 37
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <uart_init>
	adc_init();
 122:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
	timer0_init();
 126:	0e 94 a0 00 	call	0x140	; 0x140 <timer0_init>
	timer1_init();
 12a:	0e 94 a7 00 	call	0x14e	; 0x14e <timer1_init>
	init_display();
 12e:	0e 94 84 00 	call	0x108	; 0x108 <init_display>
	
	// Enable Timer1 Compare Match A interrupt
	TIMSK1 |= (1 << OCIE1A);
 132:	ef e6       	ldi	r30, 0x6F	; 111
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	80 83       	st	Z, r24
	
	sei();
 13c:	78 94       	sei
 13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0x28>

00000140 <timer0_init>:
#include <avr/interrupt.h>
#include <stdint.h>
#include <util/delay.h>

void timer0_init() {
	TCCR0A = 0b00000010;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000100;
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	85 bd       	out	0x25, r24	; 37
	OCR0A = 195;
 148:	83 ec       	ldi	r24, 0xC3	; 195
 14a:	87 bd       	out	0x27, r24	; 39
 14c:	08 95       	ret

0000014e <timer1_init>:

uint16_t channel = 0;

void timer1_init() {
	// Configure Timer1 for CTC (Clear Timer on Compare Match) mode
	TCCR1B |= (1 << WGM12);
 14e:	e1 e8       	ldi	r30, 0x81	; 129
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 83       	st	Z, r24

	// Set the prescaler to 256
	TCCR1B |= (1 << CS12);
 158:	80 81       	ld	r24, Z
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24

	// Set the value for 2ms interval
	OCR1A = 14;
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 166:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	EICRA |= (1 << ISC01) | (1 << ISC00); // Rising edge trigger
 16a:	e9 e6       	ldi	r30, 0x69	; 105
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	83 60       	ori	r24, 0x03	; 3
 172:	80 83       	st	Z, r24

	// Enable INT0 external interrupt
	EIMSK |= (1 << INT0);
 174:	8d b3       	in	r24, 0x1d	; 29
 176:	81 60       	ori	r24, 0x01	; 1
 178:	8d bb       	out	0x1d, r24	; 29
 17a:	08 95       	ret

0000017c <__vector_1>:
// 
// 	// Send the characters to the display
// 	
// }

ISR	(INT0_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	// Start ADC conversion on channel 0
	ADMUX = 0b01000000;
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC);
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 83       	st	Z, r24
	
	// Set the prescaler to 256
	TCCR1B |= (1 << CS12);
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	84 60       	ori	r24, 0x04	; 4
 1a4:	80 83       	st	Z, r24

	
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <uart_init>:
#include <stdio.h>
#include <string.h>
#include <avr/io.h>

void uart_init(uint32_t baud){
	UCSR0A = 0b00000000;
 1b6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0b00001000;
 1ba:	28 e0       	ldi	r18, 0x08	; 8
 1bc:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0b00000110;
 1c0:	26 e0       	ldi	r18, 0x06	; 6
 1c2:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 2000000/(16*baud)-1;
 1c6:	dc 01       	movw	r26, r24
 1c8:	cb 01       	movw	r24, r22
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	aa 1f       	adc	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	aa 1f       	adc	r26, r26
 1d8:	bb 1f       	adc	r27, r27
 1da:	9c 01       	movw	r18, r24
 1dc:	ad 01       	movw	r20, r26
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	44 1f       	adc	r20, r20
 1e4:	55 1f       	adc	r21, r21
 1e6:	22 0f       	add	r18, r18
 1e8:	33 1f       	adc	r19, r19
 1ea:	44 1f       	adc	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	60 e8       	ldi	r22, 0x80	; 128
 1f0:	74 e8       	ldi	r23, 0x84	; 132
 1f2:	8e e1       	ldi	r24, 0x1E	; 30
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodsi4>
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	31 09       	sbc	r19, r1
 1fe:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 202:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 206:	08 95       	ret

00000208 <__udivmodsi4>:
 208:	a1 e2       	ldi	r26, 0x21	; 33
 20a:	1a 2e       	mov	r1, r26
 20c:	aa 1b       	sub	r26, r26
 20e:	bb 1b       	sub	r27, r27
 210:	fd 01       	movw	r30, r26
 212:	0d c0       	rjmp	.+26     	; 0x22e <__udivmodsi4_ep>

00000214 <__udivmodsi4_loop>:
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	ee 1f       	adc	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	a2 17       	cp	r26, r18
 21e:	b3 07       	cpc	r27, r19
 220:	e4 07       	cpc	r30, r20
 222:	f5 07       	cpc	r31, r21
 224:	20 f0       	brcs	.+8      	; 0x22e <__udivmodsi4_ep>
 226:	a2 1b       	sub	r26, r18
 228:	b3 0b       	sbc	r27, r19
 22a:	e4 0b       	sbc	r30, r20
 22c:	f5 0b       	sbc	r31, r21

0000022e <__udivmodsi4_ep>:
 22e:	66 1f       	adc	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	88 1f       	adc	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	1a 94       	dec	r1
 238:	69 f7       	brne	.-38     	; 0x214 <__udivmodsi4_loop>
 23a:	60 95       	com	r22
 23c:	70 95       	com	r23
 23e:	80 95       	com	r24
 240:	90 95       	com	r25
 242:	9b 01       	movw	r18, r22
 244:	ac 01       	movw	r20, r24
 246:	bd 01       	movw	r22, r26
 248:	cf 01       	movw	r24, r30
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
